import 'package:carousel_slider/carousel_slider.dart';import 'package:flutter/material.dart';class ImageSliderDemo extends StatefulWidget {  final List<String> imgList;  const ImageSliderDemo({required this.imgList, super.key});  @override  State<ImageSliderDemo> createState() => _ImageSliderDemoState();}class _ImageSliderDemoState extends State<ImageSliderDemo> {  final CarouselController buttonCarouselController = CarouselController();  int _current = 0;  @override  Widget build(BuildContext context) {    return Column(      children: [        Container(            decoration: BoxDecoration(                borderRadius: BorderRadius.circular(10)            ),            child: CarouselSlider(              options: CarouselOptions(                  autoPlay: true,                  enlargeCenterPage: true,                  viewportFraction: 0.9,                  aspectRatio: 2.0,                  autoPlayAnimationDuration: Duration(milliseconds: 800),                  initialPage: 2,                  onPageChanged: (index, reason) {                    setState(() {                      _current = index;                    });                  }              ),              disableGesture: true,              carouselController: buttonCarouselController,              items: widget.imgList.map((item) => Center(                  child: ClipRRect(                    borderRadius: BorderRadius.circular(10),                    child: Image.network(item ?? '',                        fit: BoxFit.cover, width: 1000, loadingBuilder: (BuildContext context, Widget child,                          ImageChunkEvent? loadingProgress) {                        if (loadingProgress == null) return child;                        return Center(                          child: CircularProgressIndicator(                            value: loadingProgress.expectedTotalBytes != null                                ? loadingProgress.cumulativeBytesLoaded /                                loadingProgress.expectedTotalBytes!                                : null,                          ),                        );                      },),                  )))                  .toList(),            )),        Row(          mainAxisAlignment: MainAxisAlignment.center,          children: widget.imgList.asMap().entries.map((entry) {            return GestureDetector(              onTap: () => buttonCarouselController.animateToPage(entry.key),              child: Container(                width: 8.0,                height: 8.0,                margin: const EdgeInsets.symmetric(vertical: 8.0, horizontal: 4.0),                decoration: BoxDecoration(                    shape: BoxShape.circle,                    color: (Theme.of(context).brightness == Brightness.dark                        ? Colors.white                        : Colors.black)                        .withOpacity(_current == entry.key ? 0.9 : 0.4)),              ),            );          }).toList(),        ),      ],    );  }}class DetailImageSlider extends StatefulWidget {  final List<String> imgList;  const DetailImageSlider({required this.imgList, super.key});  @override  State<DetailImageSlider> createState() => _DetailImageSliderState();}class _DetailImageSliderState extends State<DetailImageSlider> {  final CarouselController buttonCarouselController = CarouselController();  int _current = 0;  @override  Widget build(BuildContext context) {    return Column(      children: [        Container(            decoration: BoxDecoration(                borderRadius: BorderRadius.circular(10)            ),            child: CarouselSlider(              options: CarouselOptions(                  enlargeCenterPage: true,                  viewportFraction: 0.9,                  aspectRatio: 2.0,                  autoPlayAnimationDuration: Duration(milliseconds: 800),                  initialPage: 2,                  onPageChanged: (index, reason) {                    setState(() {                      _current = index;                    });                  }              ),              disableGesture: true,              carouselController: buttonCarouselController,              items: widget.imgList.map((item) => Center(                  child: ClipRRect(                    borderRadius: BorderRadius.circular(10),                    child: Image.network(item ?? '',                        fit: BoxFit.contain, width: 1000,    loadingBuilder: (BuildContext context, Widget child,                          ImageChunkEvent? loadingProgress) {                        if (loadingProgress == null) return child;                        return Center(                          child: CircularProgressIndicator(                            value: loadingProgress.expectedTotalBytes != null ? loadingProgress.cumulativeBytesLoaded / loadingProgress.expectedTotalBytes! : null,                          ),                        );                      },),                  )))                  .toList(),            )),        Row(          mainAxisAlignment: MainAxisAlignment.center,          children: widget.imgList.asMap().entries.map((entry) {            return GestureDetector(              onTap: () => buttonCarouselController.animateToPage(entry.key),              child: Container(                width: 8.0,                height: 8.0,                margin: const EdgeInsets.symmetric(vertical: 8.0, horizontal: 4.0),                decoration: BoxDecoration(                    shape: BoxShape.circle,                    color: (Theme.of(context).brightness == Brightness.dark                        ? Colors.white                        : Colors.black)                        .withOpacity(_current == entry.key ? 0.9 : 0.4)),              ),            );          }).toList(),        ),      ],    );  }}